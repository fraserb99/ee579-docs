{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EE579 Group 4 Documentation # This site provides documentation to allow integration with our API and MQTT Broker. Read the Getting Started docs if you would like information on how to integrate your IoT device with our system. System Overview # Admin Interface # Our admin interface is available here: https://www.ee579-group4.net . This site enables users to login and configure rules, devices, and device groups. Our system is multi-tenant, with users able to create multiple tenants and invite other users. Rules and devices are then scoped to these tenants, meaning users only have permission to access and edit resources belonging one of their tenants. API # Our API is written in C# using ASP.NET Core. Full Swagger OpenAPI documentation is available here: https://ee579-dev-api.azurewebsites.net MQTT Broker # We are using Azure IoT Hub as our MQTT Broker. Information on connecting and recieving/publishing messages can be found here","title":"Home"},{"location":"#ee579-group-4-documentation","text":"This site provides documentation to allow integration with our API and MQTT Broker. Read the Getting Started docs if you would like information on how to integrate your IoT device with our system.","title":"EE579 Group 4 Documentation"},{"location":"#system-overview","text":"","title":"System Overview"},{"location":"#admin-interface","text":"Our admin interface is available here: https://www.ee579-group4.net . This site enables users to login and configure rules, devices, and device groups. Our system is multi-tenant, with users able to create multiple tenants and invite other users. Rules and devices are then scoped to these tenants, meaning users only have permission to access and edit resources belonging one of their tenants.","title":"Admin Interface"},{"location":"#api","text":"Our API is written in C# using ASP.NET Core. Full Swagger OpenAPI documentation is available here: https://ee579-dev-api.azurewebsites.net","title":"API"},{"location":"#mqtt-broker","text":"We are using Azure IoT Hub as our MQTT Broker. Information on connecting and recieving/publishing messages can be found here","title":"MQTT Broker"},{"location":"admin-interface/","text":"Admin Interface #","title":"Admin Interface"},{"location":"admin-interface/#admin-interface","text":"","title":"Admin Interface"},{"location":"create-account/","text":"Create an Account # Visit https://www.ee579-group4.net/signup to get started. There are several methods available for signing in: Username and Password # To create an account with a username and password, fill out the form on the sign up page. You will then be sent an email to verify that you have access to the email address. You must then click the link in the email before you can sign in. External Providers # Logging in with an external provider allows you to reduce the number of passwords and accounts you have to manage. This site allows you to sign in with your Google or Microsoft account. Click the respective button to start the external sign in process. You will then be redirected to the external providers site where you can sign in. After signing in to the external providers account, you will be redirected back to this site and signed in. Verifying your email is not required when using external sign in as signing into the account verifies that you have access to the email. Next Steps # Learn about how Multi-Tenancy works in this application","title":"Creating an Account"},{"location":"create-account/#create-an-account","text":"Visit https://www.ee579-group4.net/signup to get started. There are several methods available for signing in:","title":"Create an Account"},{"location":"create-account/#username-and-password","text":"To create an account with a username and password, fill out the form on the sign up page. You will then be sent an email to verify that you have access to the email address. You must then click the link in the email before you can sign in.","title":"Username and Password"},{"location":"create-account/#external-providers","text":"Logging in with an external provider allows you to reduce the number of passwords and accounts you have to manage. This site allows you to sign in with your Google or Microsoft account. Click the respective button to start the external sign in process. You will then be redirected to the external providers site where you can sign in. After signing in to the external providers account, you will be redirected back to this site and signed in. Verifying your email is not required when using external sign in as signing into the account verifies that you have access to the email.","title":"External Providers"},{"location":"create-account/#next-steps","text":"Learn about how Multi-Tenancy works in this application","title":"Next Steps"},{"location":"devices/","text":"Devices # Devices are the devices that will be used in rules. They send inputs to the API and receive messages to perform outputs. Adding Devices # Before devices can be used to create rules, they must be claimed by a tenant. The first step is to power the device on. When powered on for the first time, the device will register itself with the system, making it possible to claim it in the web interface. After the device has been powered on, navigatet to the devices page and click the add button above the table. This shows the modal below. This shows the devices available for you to claim. You must be on the same network as a device in order to claim it. This prevents other users from claiming devices that do not belong to them. The devices are listed by their MAC address which you may use to identify specific devices when multiple are available. If you do not know the MAC address of your device you can press the lightbulb button. This will flash an LED on the device for 5 seconds, allwoing you to identify which device the list item corresponds to. To claim a device press the add button next to its MAC address. This will bring up a form allowing you to give the device a user friendly name before claiming it. Managing Existing Devices # After devices have been added, they will be visible on the devices page as shown below. This page allows you to view all of your devices and their current state. The 'Connection State' column shows whether the device is currently connected to the MQTT broker and able to send and receive inputs and outputs. It also allows you to preform some actions on the device. Here you may identify a device in the same way as when claiming it, by pressing the LED button. You can also change the device's name and unclaim it from the current tenant. Unclaiming a Device # You may wish to unclaim a device from a tenant. This removes the device from its current tenant, and removes it from any rules it may have been involved in. This does not delete the device completely, only resets it, allowing it to be claimed by another tenant. If you want to move a device from one tenant to another this would be the way of doing that. Device Groups # Device groups provide a method of grouping devices with similar functions to improve the process of adding and managing rules. Device groups can be added by specifying a name, and list of devices that should be long to the group. The name and devices can also be edited later. Next Steps # Find out how Rules work","title":"Managing Devices"},{"location":"devices/#devices","text":"Devices are the devices that will be used in rules. They send inputs to the API and receive messages to perform outputs.","title":"Devices"},{"location":"devices/#adding-devices","text":"Before devices can be used to create rules, they must be claimed by a tenant. The first step is to power the device on. When powered on for the first time, the device will register itself with the system, making it possible to claim it in the web interface. After the device has been powered on, navigatet to the devices page and click the add button above the table. This shows the modal below. This shows the devices available for you to claim. You must be on the same network as a device in order to claim it. This prevents other users from claiming devices that do not belong to them. The devices are listed by their MAC address which you may use to identify specific devices when multiple are available. If you do not know the MAC address of your device you can press the lightbulb button. This will flash an LED on the device for 5 seconds, allwoing you to identify which device the list item corresponds to. To claim a device press the add button next to its MAC address. This will bring up a form allowing you to give the device a user friendly name before claiming it.","title":"Adding Devices"},{"location":"devices/#managing-existing-devices","text":"After devices have been added, they will be visible on the devices page as shown below. This page allows you to view all of your devices and their current state. The 'Connection State' column shows whether the device is currently connected to the MQTT broker and able to send and receive inputs and outputs. It also allows you to preform some actions on the device. Here you may identify a device in the same way as when claiming it, by pressing the LED button. You can also change the device's name and unclaim it from the current tenant.","title":"Managing Existing Devices"},{"location":"devices/#unclaiming-a-device","text":"You may wish to unclaim a device from a tenant. This removes the device from its current tenant, and removes it from any rules it may have been involved in. This does not delete the device completely, only resets it, allowing it to be claimed by another tenant. If you want to move a device from one tenant to another this would be the way of doing that.","title":"Unclaiming a Device"},{"location":"devices/#device-groups","text":"Device groups provide a method of grouping devices with similar functions to improve the process of adding and managing rules. Device groups can be added by specifying a name, and list of devices that should be long to the group. The name and devices can also be edited later.","title":"Device Groups"},{"location":"devices/#next-steps","text":"Find out how Rules work","title":"Next Steps"},{"location":"getting-started/","text":"Getting Started # Requirements #","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#requirements","text":"","title":"Requirements"},{"location":"mqtt/","text":"MQTT Broker # Connecting #","title":"Connecting to the broker"},{"location":"mqtt/#mqtt-broker","text":"","title":"MQTT Broker"},{"location":"mqtt/#connecting","text":"","title":"Connecting"},{"location":"multi-tenancy/","text":"Multi-Tenancy # What is Multi-Tenancy? # Multi-tenancy is an architecture that allows a single application to be used by multiple customers. This means that data in the application is scoped to the current customer and not visible to other customers of the application. An example of this is rhe university's use of Microsoft's suite of applications. In this case, the university has their own tenant. This tenant contains all of the data specific Multi-Tenancy in this application # Multi-tenancy in this application involves scoping rules, devices, and device groups to tenants. This allows multiple customers to use the application without other customers seeing their data. Users can then belong to multiple tenants, allowing them to view and manage their data. Creating a Tenant # When first creating an account a new tenant is created for you, allowing you to get started creating rules and adding devices. You may want to add another tenant in order to keep unrelated data separate - e.g., keeping rules and devices for each building in their own tenant. This can be done by clicking the 'Switch Tenant' button in the left drawer and then selecting 'Create a new tenant'. Next Steps # Learn how to manage users within tenants Find out how to add and manage devices","title":"Multi-Tenancy"},{"location":"multi-tenancy/#multi-tenancy","text":"","title":"Multi-Tenancy"},{"location":"multi-tenancy/#what-is-multi-tenancy","text":"Multi-tenancy is an architecture that allows a single application to be used by multiple customers. This means that data in the application is scoped to the current customer and not visible to other customers of the application. An example of this is rhe university's use of Microsoft's suite of applications. In this case, the university has their own tenant. This tenant contains all of the data specific","title":"What is Multi-Tenancy?"},{"location":"multi-tenancy/#multi-tenancy-in-this-application","text":"Multi-tenancy in this application involves scoping rules, devices, and device groups to tenants. This allows multiple customers to use the application without other customers seeing their data. Users can then belong to multiple tenants, allowing them to view and manage their data.","title":"Multi-Tenancy in this application"},{"location":"multi-tenancy/#creating-a-tenant","text":"When first creating an account a new tenant is created for you, allowing you to get started creating rules and adding devices. You may want to add another tenant in order to keep unrelated data separate - e.g., keeping rules and devices for each building in their own tenant. This can be done by clicking the 'Switch Tenant' button in the left drawer and then selecting 'Create a new tenant'.","title":"Creating a Tenant"},{"location":"multi-tenancy/#next-steps","text":"Learn how to manage users within tenants Find out how to add and manage devices","title":"Next Steps"},{"location":"register-device/","text":"Getting Started # Registering a device # In order for your device to connect to IoT Hub, it must first retreive credentials. This can be done by sending a POST request to https://ee579-dev-api.azurewebsites.net/devices/register . This will register your device with our system and return credentials to allow connection over MQTT. The device should make this request when first powered on, but the same endpoint can be used even if a device is already registered in the system. This accounts for situations where the device may have lost it's credentials, and allows the device to make the request every time it powers on, if desired. Request Format # Example Body # { \"deviceId\": \"<string>\" } Parameters # deviceId : This should be a unique identifier. A MAC adress is recommended, but it can take any form - guid, uuid, etc. Response Format # Example Body # { \"host\": \"IFTTT-Iot-Hub.azure-devices.net\", \"port\": 8883, \"topic\": \"devices/{deviceId}/messages/devicebound/#\", \"password\": \"SharedAccessSignature sr=IFTTT-Iot-Hub.azure-devices.net%2Fdevices%2F{deviceId}&sig=KOYS9LgCJ9eH7TTlMIGvedxIVI3cXmha7uU6yB4Bs6M%3D&se=88018657115\" } Parameters # host : The MQTT broker url port : The port the MQTT broker is listening on topic : The topic that the device should subscribe to, to receive cloud-to-device messages password : The password that should be used when connecting to the broker, in the form of a SAS token Debugging # It may be neccessary to make this request on a computer, rather than IoT device when debugging. The API Swagger Docs can be used to make this request and provides a prefilled request body. Any other method of making HTTP requests can also be used - cURL, Postman , etc. Next Steps # Connecting to the broker","title":"Registering a Device"},{"location":"register-device/#getting-started","text":"","title":"Getting Started"},{"location":"register-device/#registering-a-device","text":"In order for your device to connect to IoT Hub, it must first retreive credentials. This can be done by sending a POST request to https://ee579-dev-api.azurewebsites.net/devices/register . This will register your device with our system and return credentials to allow connection over MQTT. The device should make this request when first powered on, but the same endpoint can be used even if a device is already registered in the system. This accounts for situations where the device may have lost it's credentials, and allows the device to make the request every time it powers on, if desired.","title":"Registering a device"},{"location":"register-device/#request-format","text":"","title":"Request Format"},{"location":"register-device/#example-body","text":"{ \"deviceId\": \"<string>\" }","title":"Example Body"},{"location":"register-device/#parameters","text":"deviceId : This should be a unique identifier. A MAC adress is recommended, but it can take any form - guid, uuid, etc.","title":"Parameters"},{"location":"register-device/#response-format","text":"","title":"Response Format"},{"location":"register-device/#example-body_1","text":"{ \"host\": \"IFTTT-Iot-Hub.azure-devices.net\", \"port\": 8883, \"topic\": \"devices/{deviceId}/messages/devicebound/#\", \"password\": \"SharedAccessSignature sr=IFTTT-Iot-Hub.azure-devices.net%2Fdevices%2F{deviceId}&sig=KOYS9LgCJ9eH7TTlMIGvedxIVI3cXmha7uU6yB4Bs6M%3D&se=88018657115\" }","title":"Example Body"},{"location":"register-device/#parameters_1","text":"host : The MQTT broker url port : The port the MQTT broker is listening on topic : The topic that the device should subscribe to, to receive cloud-to-device messages password : The password that should be used when connecting to the broker, in the form of a SAS token","title":"Parameters"},{"location":"register-device/#debugging","text":"It may be neccessary to make this request on a computer, rather than IoT device when debugging. The API Swagger Docs can be used to make this request and provides a prefilled request body. Any other method of making HTTP requests can also be used - cURL, Postman , etc.","title":"Debugging"},{"location":"register-device/#next-steps","text":"Connecting to the broker","title":"Next Steps"},{"location":"rules/","text":"Rules #","title":"Rules"},{"location":"rules/#rules","text":"","title":"Rules"},{"location":"users/","text":"Users # Roles # Users can have one of two roles within a tenant: User - Users with this role can manage devices, rules, and device groups. However, they cannot manage users belonging to the tenant or edit the tenant itself. Owner - This user has full control over the tenant. They can manage everything a user can, along with inviting and removing users and editing the tenant. Inviting Users # Users can be invited to tenants by their email address. If the user already has an account, they will have immediate access to the tenant and receive an email telling them that they have been invited to your tenant. If they have not yet created an account they will receive an email informing them they have been invited to your tenant, including a link to sign up.","title":"Managing Users"},{"location":"users/#users","text":"","title":"Users"},{"location":"users/#roles","text":"Users can have one of two roles within a tenant: User - Users with this role can manage devices, rules, and device groups. However, they cannot manage users belonging to the tenant or edit the tenant itself. Owner - This user has full control over the tenant. They can manage everything a user can, along with inviting and removing users and editing the tenant.","title":"Roles"},{"location":"users/#inviting-users","text":"Users can be invited to tenants by their email address. If the user already has an account, they will have immediate access to the tenant and receive an email telling them that they have been invited to your tenant. If they have not yet created an account they will receive an email informing them they have been invited to your tenant, including a link to sign up.","title":"Inviting Users"}]}